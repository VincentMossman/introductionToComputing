with Ada.Text_IO;
with Ada.Integer_Text_IO;
procedure Assign13 is

-- Author: Vincent T.Mossman
-- Date:   December 2013
--
-- Assumptions
--   1. The data file is formatted with name on one line followed by
--      lucky number on a second line
--   2. The name is in the form Last Name comma First Name

   subtype Name_String is String (1 .. 20);
   type    Lucky_Range is range 1000 .. 9999;

   type Name_Rec is
      record
         First : Name_String;
         Last  : Name_String;
      end record;

   type Student_Rec is
      record
         Name         : Name_Rec;
         Lucky_Number : Lucky_Range;
      end record;

   type    Student_Array is array (Positive range <>) of Student_Rec;
   subtype Class_Array   is Student_Array (1 .. 50);

   package Lucky_IO is new Ada.Text_IO.Integer_IO (Num => Lucky_Range);

   ----------------------------------------------------------------------------
   function Index (Source  : in String;
                   Pattern : in Character) return Natural is
   -- Returns the index of the first occurrence of Pattern in Source
   -- Preconditions  : None
   -- Postconditions : If Source contains Pattern then
   --                     Source (Result) = Pattern
   --                  Else
   --                     Result is zero

      Result : Natural;

   begin

      Result := Source'First;

      loop
         exit when Result > Source'Last or else Source (Result) = Pattern;
         Result := Result + 1;
      end loop;

      if Result > Source'Last then
         return 0;
      else
         return Result;
      end if;

   end Index;


   ----------------------------------------------------------------------------
   procedure Get_Name (File : in out Ada.Text_IO.File_Type;
                       Name :    out Name_Rec) is
   -- Gets a student name from single line of a data file
   -- Preconditions  : File is open for input
   -- Postconditions : Name contains blank padded first and last names

      subtype Name_String is String (1 .. 40);

      Whole_Name     : Name_String;
      Length         : Natural;
      Comma_Position : Natural;

   begin
      Ada.Text_IO.Get_Line (File => File,
                            Item => Whole_Name,
                            Last => Length);
      Comma_Position := Index (Source  => Whole_Name (1 .. Length),
                               Pattern => ',');
      -- Copy the last name and first name into the record
      Name.Last (1 .. Comma_Position - 1)           := Whole_Name (1 .. Comma_Position - 1);
      Name.First (1 .. Length - Comma_Position - 1) := Whole_Name (Comma_Position + 2 .. Length);

      -- Pad the last name and first name with blanks (both statements are incorrect!)
      Name.Last (Comma_Position .. Name.Last'Last)   := (others => ' ');
      Name.First (Length - Comma_Position .. Name.First'Last) := (others => ' ');
   end Get_Name;


   ----------------------------------------------------------------------------
   procedure Get_Students (Class : out Student_Array;
                           Last  : out Natural) is
   -- Gets the data for a class of students
   -- Preconditions  : None
   -- Postconditions : Class contains the data read
   --                  Last is the index of the last element read
   --                  If no elements are read, Last is Class'First - 1

      subtype File_String is String (1 .. 80);

      File      : Ada.Text_IO.File_Type;
      File_Name : File_String;
      Length    : Natural;

   begin
      Ada.Text_IO.Put_Line ("Enter the name of the data file with student information.");
      Ada.Text_IO.Get_Line (Item => File_Name,
                            Last => Length);
      Ada.Text_IO.Open (File => File,
                        Mode => Ada.Text_IO.In_File,
                        Name => File_Name (1 .. Length));

      Last := Class'First - 1;

      -- Get the student data from the file
      -- Each iteration, get the data for one student
      loop
         exit when Ada.Text_IO.End_Of_File (File);
         Last := Last + 1;
         -- Get the student's name
         Get_Name (File => File,
                   Name => Class (Last).Name);
         -- Get the student's lucky number
         Lucky_IO.Get (File => File,
                       Item => Class (Last).Lucky_Number);

         if not Ada.Text_IO.End_Of_File (File) then
            Ada.Text_IO.Skip_Line (File);
         end if;
      end loop;

      Ada.Text_IO.Close (File);
   end Get_Students;


   ----------------------------------------------------------------------------

   procedure Display_Name (Student : in Student_Rec) is

      Blank_Pos : Natural;

   begin

      -- Display the first name without the padded blanks
      Blank_Pos := Index (Source  => Student.Name.Last,
                          Pattern => ' ');
      if Blank_Pos > 0 then
         Ada.Text_IO.Put (Student.Name.Last (1 .. Blank_Pos - 1));
      else
         Ada.Text_IO.Put (Student.Name.Last);
      end if;

      Ada.Text_IO.Put (", ");  -- Blank between first and last name

      -- Display the last name without the padded blanks
      Blank_Pos := Index (Source  => Student.Name.First,
                          Pattern => ' ');
      if Blank_Pos > 0 then
         Ada.Text_IO.Put (Student.Name.First (1 .. Blank_Pos - 1));
      else
         Ada.Text_IO.Put (Student.Name.First);
      end if;

   end Display_Name;

   ----------------------------------------------------------------------------

   procedure Display_Students (Students : in Student_Array) is
   -- Display all the student information, one student per line
   -- Preconditions  : None
   -- Postconditions : Data in array Students is displayed

   begin
      for I in Students'Range loop

         -- Display Student's Name
         Display_Name (Students (I));

         -- Display the student's lucky number
         Ada.Text_IO.Set_Col (To => 25);
         Lucky_IO.Put (Item  => Students (I).Lucky_Number,
                       Width => 1);
         Ada.Text_IO.New_Line;
      end loop;
   end Display_Students;

   --------------------------------------------------------------------------

   procedure Binary_Search (List  : in     Student_Array;
                            Item  : in     Lucky_Range;
                            Found :    out Boolean;
                            Index :    out Integer) is

   -- Search list for the given item
   --
   -- Preconditions  : Items in list are in ascending order
   --
   -- Postcondiitons : If Item is in List
   --                     Found is True
   --                     Index is the location of Item in List
   --                  If Item is not in List
   --                     Found is False
   --                     Index is undefined

      First  : Integer;   -- Lower index bound of list
      Last   : Integer;   -- Upper index bound of list
      Middle : Integer;   -- Middle index

   begin

      First := List'First;
      Last  := List'Last;
      Found := False;

      -- Loop searches for Item in List (First .. Last)
      -- Each iteration, check the middle value and half list
      Search_Loop :
      loop
         exit Search_Loop when Found or First > Last;
         Middle := (First + Last) / 2;
         if Item < List (Middle).Lucky_Number then
            -- Item is not in List (Middle .. Last)
            Last := Middle - 1;
         elsif Item > List (Middle).Lucky_Number then
            -- Item is not in List (First .. Middle)
            First := Middle + 1;
         else
            Found := True;
            Index := Middle;
         end if;
      end loop Search_Loop;
   end Binary_Search;

   --------------------------------------------------------------------------

   procedure Search_Ordered (List  : in     Student_Array;
                             Item  : in     Student_Rec;
                             Found :    out Boolean;
                             Index :    out Integer) is

   -- Procedure searches list for the given item
   --
   -- Preconditions  : Items in list are in ascending order
   --
   -- Postconditions : If Item is in List
   --                     Found is True
   --                     Index is the location of item in list
   --                  If Item is not in list
   --                     Found is False
   --                     Index is the location of where Item would be
   --                      if it were in list

   begin

      Index := List'First;   -- Start searching at the first component
      -- Loop searches for Item in List
      -- Each iteration, check one value in List
      Search_Loop :
      loop
         exit Search_Loop when (Index > List'Last) or else (Item.Lucky_Number <= List (Index).Lucky_Number);
         Index := Index + 1;
      end loop Search_Loop;

      -- Determine whether or not the item was found
      Found := (Index <= List'Last) and then (Item = List (Index));

   end Search_Ordered;

   --------------------------------------------------------------------------
   procedure Sort_By_Lucky_Number (List : in out Student_Array) is

      First_Unsorted : Integer;      -- Index of first element of unsorted list
      Location       : Integer;      -- Insertion location in sorted list
      Value          : Student_Rec;  -- Copy of first element of unsorted list
      Found          : Boolean;      -- Not used, needed for Search_Ordered

   begin

      First_Unsorted := List'First + 1;

      -- Loop sorts by lucky number
      -- Each iteration, the first element in the unsorted part of the array is inserted
      --  into the sorted part of the array
      loop

         exit when First_Unsorted > List'Last;

         -- Find where in the sorted portion of the array to insert
         Search_Ordered (List  => List (List'First .. First_Unsorted - 1),
                         Item  => List (First_Unsorted),
                         Found => Found,
                         Index => Location);

         -- Make a copy of List (First_Unsorted) so slide won't destroy it
         Value := List (First_Unsorted);

         -- Open up a space for the element by sliding all below it down
         List (Location + 1 .. First_Unsorted) := List (Location .. First_Unsorted - 1);

         -- Insert the current value
         List (Location) := Value;

         -- Shrink the unsorted part of the array
         First_Unsorted := First_Unsorted + 1;
      end loop;

   end Sort_By_Lucky_Number;


-----------------------------------------------------------------------------

   Class : Class_Array;   -- Information of a class
   Size  : Natural;       -- The number of students in the class

   Lucky_Number_Search : Integer;   -- Lucky number to search for
   Position            : Integer;   -- Index of lucky number found
   Found               : Boolean;   -- Is Lucky Number in List

begin   -- Assign13

   Get_Students (Class => Class,
                 Last  => Size);
   Ada.Text_IO.New_Line (2);

   Ada.Text_IO.Put_Line ("The unordered list of students");
   Ada.Text_IO.New_Line;
   Display_Students (Class (1 .. Size));
   Ada.Text_IO.New_Line (2);

   Ada.Text_IO.Put_Line ("Students ordered by lucky number");
   Ada.Text_IO.New_Line;
   Sort_By_Lucky_Number (Class (1 .. Size));
   Display_Students (Class (1 .. Size));
   Ada.Text_IO.New_Line (2);

   -- Loop locates user defined lucky number
   -- Each iteration, finds one number
   Lucky_Num_Search :
   loop
      Ada.Text_IO.Put ("Please enter a lucky number: ");
      Ada.Integer_Text_IO.Get (Lucky_Number_Search);
      exit Lucky_Num_Search when Lucky_Number_Search not in Integer (Lucky_Range'First) .. Integer (Lucky_Range'Last);
      Binary_Search (List  => Class (1 .. Size),
                     Item  => Lucky_Range (Lucky_Number_Search),
                     Found => Found,
                     Index => Position);
      if Found then
         Display_Name (Class (Position));
         Ada.Text_IO.Put (" picked the lucky number, ");
         Ada.Integer_Text_IO.Put (Item  => Lucky_Number_Search,
                                  Width => 1);
      else
         Ada.Text_IO.Put ("No student has lucky number ");
         Ada.Integer_Text_IO.Put (Item  => Lucky_Number_Search,
                                  Width => 1);
      end if;
      Ada.Text_IO.New_Line;

   end loop Lucky_Num_Search;
end Assign13;
